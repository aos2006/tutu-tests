'use strict';

var getOnlyBrackets = str => {
  var regexp = /[^()\[\]{},<>]/g;
  return str.replace(regexp, "");
};
var areBracketsInOrder = str => {
  let brackets = new Map([[']', '['], ['}', '{'], [')', '('], ['>', '<']]);
  let isClean = true;
  const iter = (i, len, isCleaning, brackets, cur, acc) => {
    if (i >= len && !isCleaning) return isCleaning && !acc.length;
    if (i >= len) return isCleaning && !acc.length;
    if (brackets.has(cur[i])) {
      let isCleaning = acc.pop() === brackets.get(cur[i]);
      return iter(++i, len, isCleaning, brackets, cur, acc);
    } else {
      acc.push(str[i]);
      return iter(++i, len, isCleaning, brackets, cur, acc);
    }
  };
  return iter(0, str.length, isClean, brackets, str, []);
};
var checkSyntax = str => {
  const newStr = getOnlyBrackets(str);
  return areBracketsInOrder(newStr) ? 0 : 1;
};
console.log(checkSyntax("---((++++))----") === 0);
console.log(checkSyntax("") === 0);
console.log(checkSyntax("before ( middle []) after ") === 0);
console.log(checkSyntax(") (") === 1);
console.log(checkSyntax("} {") === 1);
console.log(checkSyntax("<>(])") === 1);
console.log(checkSyntax("(  [  <>  ()  ]  <>  )") === 0);
console.log(checkSyntax("   (      [)") === 1);
'use strict';

let dsCount = (...args) => {
  const [str, ...rest] = args;
  const concatedSubstings = rest.join('');
  const iter = (count, position, curr, substring) => {
    if (curr.indexOf(substring, position) === -1) return count;

    let newPosition = curr.indexOf(substring, position);
    return iter(++count, ++newPosition, curr, substring);
  };

  return iter(0, 0, str.toLowerCase(), concatedSubstings.toLowerCase());
};

try {
  test(dsCount, ['ab___ab__', 'a', 'b'], 2);
  test(dsCount, ['___cd____', 'c', 'd'], 1);
  test(dsCount, ['de_______', 'd', 'e'], 1);
  test(dsCount, ['12_12__12', '1', '2'], 3);
  test(dsCount, ['_ba______', 'a', 'b'], 0);
  test(dsCount, ['_a__b____', 'a', 'b'], 0);
  test(dsCount, ['-ab-аb-ab', 'a', 'b'], 2);
  test(dsCount, ['aAa', 'a', 'a'], 2);
  console.info("Congratulations! All tests success passed.");
} catch (e) {
  console.error(e);
}

// Простая функция тестирования

function test(call, args, count, n) {
  let r = call.apply(n, args) === count;
  console.assert(r, `Finded items count: ${count}`);
  if (!r) throw "Test failed!";
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
