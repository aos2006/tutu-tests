'use strict';

let compose = (f, g) => (str, ex) => f(g(str, ex));
let checkSequence = arr => {
  let pairs = 0;
  const iter = list => {
    if (!list.length) return pairs;
    return list.reduce((prev, item, i) => {
      if (`${prev}${item}` === '<>' || `${prev}${item}` === '[]' || `${prev}${item}` === '{}' || `${prev}${item}` === '()') {
        ++pairs;
        list.splice(--i, 2);
        iter(list);
      }
      return item;
    });
  };
  iter(arr);
  return pairs;
};
const sortBracketsStr = (str, excludedBrackets = []) => {
  let bracketsList = new Map([['(', { car: ')', cdr: '(' }], [')', { car: '(', cdr: ')' }], ['[', { car: ']', cdr: '[' }], [']', { car: '[', cdr: ']' }], ['{', { car: '}', cdr: '{' }], ['}', { car: '{', cdr: '}' }], ['<', { car: '>', cdr: '<' }], ['>', { car: '<', cdr: '>' }]]);
  excludedBrackets.length > 0 ? excludedBrackets.forEach(item => {
    bracketsList.delete(bracketsList.get(item).car);
    bracketsList.delete(item);
  }) : null;

  return str.split('').filter(char => bracketsList.has(char));
};

const checkSyntax = (str, excludedBrackets = []) => {
  let arrLen;
  let result = compose(arr => f => {
    arrLen = arr.length;
    return f(arr);
  }, sortBracketsStr)(str, excludedBrackets);
  let pairs = result(checkSequence);
  if (!arrLen) return 0;
  return arrLen / pairs === 2 ? 0 : 1;
};

console.log(checkSyntax("---()[][]----") === 0);
console.log(checkSyntax("(") === 1);
console.log(checkSyntax("[]{}{}((()))") === 0);
console.log(checkSyntax("before ( middle []) after ") === 0);
console.log(checkSyntax("( {} [] <> ){(((])))}") === 1);
console.log(checkSyntax(") (", ['(']) === 0);
console.log(checkSyntax("} {") === 1);
console.log(checkSyntax("} {", ['{']) === 0);
console.log(checkSyntax("<(   >)") === 1);
console.log(checkSyntax("<(   >)", ['(']) === 0);
console.log(checkSyntax("(  [  <[]>  ()  ]  <>  )") === 0);
console.log(checkSyntax("(  [  <>  ()  ]  <>  )", ['<', '[', '(']) === 0);
console.log(checkSyntax("   (      [)") === 1);
console.log(checkSyntax("   (      [)", ['[']) === 0);
'use strict';

let dsCount = (...args) => {
  const [str, ...rest] = args;
  const concatedSubstings = rest.join('');
  const iter = (count, position, curr, substring) => {
    if (curr.indexOf(substring, position) === -1) return count;

    let newPosition = curr.indexOf(substring, position);
    return iter(++count, ++newPosition, curr, substring);
  };

  return iter(0, 0, str.toLowerCase(), concatedSubstings.toLowerCase());
};

try {
  test(dsCount, ['ab___ab__', 'a', 'b'], 2);
  test(dsCount, ['___cd____', 'c', 'd'], 1);
  test(dsCount, ['de_______', 'd', 'e'], 1);
  test(dsCount, ['12_12__12', '1', '2'], 3);
  test(dsCount, ['_ba______', 'a', 'b'], 0);
  test(dsCount, ['_a__b____', 'a', 'b'], 0);
  test(dsCount, ['-ab-аb-ab', 'a', 'b'], 2);
  test(dsCount, ['aAa', 'a', 'a'], 2);
  console.info("Congratulations! All tests success passed.");
} catch (e) {
  console.error(e);
}

// Простая функция тестирования

function test(call, args, count, n) {
  let r = call.apply(n, args) === count;
  console.assert(r, `Finded items count: ${count}`);
  if (!r) throw "Test failed!";
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
