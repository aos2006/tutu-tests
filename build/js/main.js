'use strict';

var getOnlyBrackets = str => {
  var regexp = /[^()\[\]{},<>]/g;
  return str.replace(regexp, "");
};
var areBracketsInOrder = str => {
  let brackets = new Map([[']', '['], ['}', '{'], [')', '('], ['>', '<']]);
  let isClean = true;
  const iter = (i, len, isCleaning, brackets, cur, acc) => {
    if (i >= len && !isCleaning) return isCleaning && !acc.length;
    if (i >= len) return isCleaning && !acc.length;
    if (brackets.has(cur[i])) {
      let isCleaning = acc.pop() === brackets.get(cur[i]);
      return iter(++i, len, isCleaning, brackets, cur, acc);
    } else {
      acc.push(str[i]);
      return iter(++i, len, isCleaning, brackets, cur, acc);
    }
  };
  return iter(0, str.length, isClean, brackets, str, []);
};
var checkSyntax = str => {
  const newStr = getOnlyBrackets(str);
  return areBracketsInOrder(newStr) ? 0 : 1;
};
console.log('checkSyntax');
console.log(checkSyntax("---((((((()))))))----") === 0);
console.log(checkSyntax("") === 0);
console.log(checkSyntax("before ( middle []) after ") === 0);
console.log(checkSyntax(") (") === 1);
console.log(checkSyntax("} {") === 1);
console.log(checkSyntax("<>(])") === 1);
console.log(checkSyntax("(  [  <>  ()  ]  <>  )") === 0);
console.log(checkSyntax("   (      [)") === 1);
'use strict';

let dsCount = (...args) => {
  const [str, ...rest] = args;
  const concatedSubstings = rest.join('');
  const iter = (count, position, curr, substring) => {
    if (curr.indexOf(substring, position) === -1) return count;

    let newPosition = curr.indexOf(substring, position);
    return iter(++count, ++newPosition, curr, substring);
  };

  return iter(0, 0, str.toLowerCase(), concatedSubstings.toLowerCase());
};
console.log('dsCount');
try {
  test(dsCount, ['ab___ab__', 'a', 'b'], 2);
  test(dsCount, ['___cd____', 'c', 'd'], 1);
  test(dsCount, ['de_______', 'd', 'e'], 1);
  test(dsCount, ['12_12__12', '1', '2'], 3);
  test(dsCount, ['_ba______', 'a', 'b'], 0);
  test(dsCount, ['_a__b____', 'a', 'b'], 0);
  test(dsCount, ['-ab-аb-ab', 'a', 'b'], 2);
  test(dsCount, ['aAa', 'a', 'a'], 2);
  console.info("Congratulations! All tests success passed.");
} catch (e) {
  console.error(e);
}

// Простая функция тестирования

function test(call, args, count, n) {
  let r = call.apply(n, args) === count;
  console.assert(r, `Finded items count: ${count}`);
  if (!r) throw "Test failed!";
}
console.log('parseUrl');
let parseUrl = url => {
  if (url === '') throw new Error('Неккоректный url');
  let a = document.createElement('a');
  a.href = url;
  return a;
};

let a = parseUrl('http://tutu.ru:8080/do/any.php?a=1&b[]=a&b[]=b#foo');

console.log(a.href);
console.log(a.hash);
console.log(a.port);
console.log(a.host);
console.log(a.protocol);
console.log(a.hostname);
console.log(a.pathname);
console.log(a.origin);
//Задача #1
const getSubstring = ({ str, subStr1, subStr2 }) => {
  if (str === '') return -1;
  let subStrPosition1 = str.lastIndexOf(subStr1, str.length - 1);
  let subStrPosition2 = str.lastIndexOf(subStr2, str.length - 1);

  return subStrPosition1 !== -1 ? subStrPosition1 : subStrPosition2 !== -1 ? subStrPosition2 : subStrPosition1 === subStrPosition2 ? subStrPosition1 : -1;
};

function func(s, a, b) {

  if (s.match(/^$/)) {
    return -1;
  }

  var i = s.length - 1;
  var aIndex = -1;
  var bIndex = -1;

  while (aIndex == -1 && bIndex == -1 && i > 0) {
    if (s.substring(i, i + 1) == a) {
      aIndex = i;
    }
    if (s.substring(i, i + 1) == b) {
      bIndex = i;
    }
    i = i - 1;
  }
  if (aIndex != -1) {
    if (bIndex == -1) {
      return aIndex;
    } else {
      return Math.max(aIndex, bIndex);
    }
  }

  if (bIndex != -1) {
    return bIndex;
  } else {
    return -1;
  }
}

console.log('Refactoring task 1', func('12345560', '0', '0'), getSubstring({ str: '12345560', subStr1: '0', subStr2: '0' }));

//Задача 2
const drawRating = vote => {
  if (vote > 0 && vote <= 100) return Math.ceil(vote / 20);
  throw new Error('Некорректное значение');
};

// Проверка работы результата
console.log(drawRating(0));
console.log(drawRating(1));
console.log(drawRating(50));
console.log(drawRating(99));
console.log(drawRating(-1));
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNoZWNrU3ludGF4LmpzIiwiZHNDb3VudC5qcyIsInBhcnNlVXJsLmpzIiwicmVmYWN0b3JpbmcuanMiXSwibmFtZXMiOlsiZ2V0T25seUJyYWNrZXRzIiwic3RyIiwicmVnZXhwIiwicmVwbGFjZSIsImFyZUJyYWNrZXRzSW5PcmRlciIsImJyYWNrZXRzIiwiTWFwIiwiaXNDbGVhbiIsIml0ZXIiLCJpIiwibGVuIiwiaXNDbGVhbmluZyIsImN1ciIsImFjYyIsImxlbmd0aCIsImhhcyIsInBvcCIsImdldCIsInB1c2giLCJjaGVja1N5bnRheCIsIm5ld1N0ciIsImNvbnNvbGUiLCJsb2ciLCJkc0NvdW50IiwiYXJncyIsInJlc3QiLCJjb25jYXRlZFN1YnN0aW5ncyIsImpvaW4iLCJjb3VudCIsInBvc2l0aW9uIiwiY3VyciIsInN1YnN0cmluZyIsImluZGV4T2YiLCJuZXdQb3NpdGlvbiIsInRvTG93ZXJDYXNlIiwidGVzdCIsImluZm8iLCJlIiwiZXJyb3IiLCJjYWxsIiwibiIsInIiLCJhcHBseSIsImFzc2VydCIsInBhcnNlVXJsIiwidXJsIiwiRXJyb3IiLCJhIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiaHJlZiIsImhhc2giLCJwb3J0IiwiaG9zdCIsInByb3RvY29sIiwiaG9zdG5hbWUiLCJwYXRobmFtZSIsIm9yaWdpbiIsImdldFN1YnN0cmluZyIsInN1YlN0cjEiLCJzdWJTdHIyIiwic3ViU3RyUG9zaXRpb24xIiwibGFzdEluZGV4T2YiLCJzdWJTdHJQb3NpdGlvbjIiLCJmdW5jIiwicyIsImIiLCJtYXRjaCIsImFJbmRleCIsImJJbmRleCIsIk1hdGgiLCJtYXgiLCJkcmF3UmF0aW5nIiwidm90ZSIsImNlaWwiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLElBQUlBLGtCQUFtQkMsR0FBRCxJQUFTO0FBQzdCLE1BQUlDLFNBQVMsaUJBQWI7QUFDQSxTQUFRRCxHQUFELENBQU1FLE9BQU4sQ0FBY0QsTUFBZCxFQUFzQixFQUF0QixD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aEIsYUFBT0QsTUFBUDtBQUNELEtBRkQsTUFHSztBQUNILGFBQU9FLEtBQUtDLEdBQUwsQ0FBU0gsTUFBVCxFQUFpQkMsTUFBakIsQ0FBUDtBQUNEO0FBQ0Y7O0FBRUQsTUFBSUEsVUFBVSxDQUFDLENBQWYsRUFBa0I7QUFDaEIsV0FBT0EsTUFBUDtBQUNELEdBRkQsTUFHSztBQUNILFdBQU8sQ0FBQyxDQUFSO0FBQ0Q7QUFDRjs7QUFFRGhELFFBQVFDLEdBQVIsQ0FDSSxvQkFESixFQUVJMEMsS0FBSyxVQUFMLEVBQWlCLEdBQWpCLEVBQXNCLEdBQXRCLENBRkosRUFFZ0NOLGFBQWEsRUFBQ3pELEtBQUssVUFBTixFQUFrQjBELFNBQVMsR0FBM0IsRUFBZ0NDLFNBQVMsR0FBekMsRUFBYixDQUZoQzs7QUFNQTtBQUNBLE1BQU1ZLGFBQWNDLElBQUQsSUFBVTtBQUMzQixNQUFJQSxPQUFPLENBQVAsSUFBWUEsUUFBUSxHQUF4QixFQUE2QixPQUFPSCxLQUFLSSxJQUFMLENBQVVELE9BQU8sRUFBakIsQ0FBUDtBQUM3QixRQUFNLElBQUkzQixLQUFKLENBQVUsdUJBQVYsQ0FBTjtBQUNELENBSEQ7O0FBS0E7QUFDQXpCLFFBQVFDLEdBQVIsQ0FBWWtELFdBQVcsQ0FBWCxDQUFaO0FBQ0FuRCxRQUFRQyxHQUFSLENBQVlrRCxXQUFXLENBQVgsQ0FBWjtBQUNBbkQsUUFBUUMsR0FBUixDQUFZa0QsV0FBVyxFQUFYLENBQVo7QUFDQW5ELFFBQVFDLEdBQVIsQ0FBWWtELFdBQVcsRUFBWCxDQUFaO0FBQ0FuRCxRQUFRQyxHQUFSLENBQVlrRCxXQUFXLENBQUMsQ0FBWixDQUFaIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgZ2V0T25seUJyYWNrZXRzID0gKHN0cikgPT4ge1xuICB2YXIgcmVnZXhwID0gL1teKClcXFtcXF17fSw8Pl0vZztcbiAgcmV0dXJuIChzdHIpLnJlcGxhY2UocmVnZXhwLCBcIlwiKTtcbn07XG52YXIgYXJlQnJhY2tldHNJbk9yZGVyID0gKHN0cikgPT4ge1xuICBsZXQgYnJhY2tldHMgPSBuZXcgTWFwKFxuICAgICAgW1xuICAgICAgICAgIFsnXScsICdbJ10sXG4gICAgICAgICAgWyd9JywgJ3snXSxcbiAgICAgICAgICBbJyknLCAnKCddLFxuICAgICAgICAgIFsnPicsICc8J11cbiAgICAgIF1cbiAgKTtcbiAgbGV0IGlzQ2xlYW4gPSB0cnVlO1xuICBjb25zdCBpdGVyID0gKGksIGxlbiwgaXNDbGVhbmluZywgYnJhY2tldHMsIGN1ciwgYWNjKSA9PiB7XG4gICAgaWYgKGkgPj0gbGVuICYmICFpc0NsZWFuaW5nKSByZXR1cm4gaXNDbGVhbmluZyAmJiAhYWNjLmxlbmd0aDtcbiAgICBpZiAoaSA+PSBsZW4pIHJldHVybiBpc0NsZWFuaW5nICYmICFhY2MubGVuZ3RoO1xuICAgIGlmIChicmFja2V0cy5oYXMoY3VyW2ldKSkge1xuICAgICAgbGV0IGlzQ2xlYW5pbmcgPSBhY2MucG9wKCkgPT09IGJyYWNrZXRzLmdldChjdXJbaV0pO1xuICAgICAgcmV0dXJuIGl0ZXIoKytpLCBsZW4sIGlzQ2xlYW5pbmcsIGJyYWNrZXRzLCBjdXIsIGFjYyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFjYy5wdXNoKHN0cltpXSk7XG4gICAgICByZXR1cm4gaXRlcigrK2ksIGxlbiwgaXNDbGVhbmluZywgYnJhY2tldHMsIGN1ciwgYWNjKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGl0ZXIoMCwgc3RyLmxlbmd0aCwgaXNDbGVhbiwgYnJhY2tldHMsIHN0ciwgW10pXG59O1xudmFyIGNoZWNrU3ludGF4ID0gKHN0cikgPT4ge1xuICBjb25zdCBuZXdTdHIgPSBnZXRPbmx5QnJhY2tldHMoc3RyKTtcbiAgcmV0dXJuIGFyZUJyYWNrZXRzSW5PcmRlcihuZXdTdHIpID8gMCA6IDE7XG59O1xuY29uc29sZS5sb2coJ2NoZWNrU3ludGF4JylcbmNvbnNvbGUubG9nIChjaGVja1N5bnRheChcIi0tLSgoKCgoKCgpKSkpKSkpLS0tLVwiKSA9PT0gMCk7XG5jb25zb2xlLmxvZyAoY2hlY2tTeW50YXggKFwiXCIpID09PSAwKTtcbmNvbnNvbGUubG9nIChjaGVja1N5bnRheCAoXCJiZWZvcmUgKCBtaWRkbGUgW10pIGFmdGVyIFwiKSA9PT0gMCk7XG5jb25zb2xlLmxvZyAoY2hlY2tTeW50YXggKFwiKSAoXCIpID09PSAxKTtcbmNvbnNvbGUubG9nIChjaGVja1N5bnRheCAoXCJ9IHtcIikgPT09IDEpO1xuY29uc29sZS5sb2cgKGNoZWNrU3ludGF4IChcIjw+KF0pXCIpID09PSAxKTtcbmNvbnNvbGUubG9nIChjaGVja1N5bnRheCAoXCIoICBbICA8PiAgKCkgIF0gIDw+ICApXCIpID09PSAwKTtcbmNvbnNvbGUubG9nIChjaGVja1N5bnRheCAoXCIgICAoICAgICAgWylcIikgPT09IDEpO1xuXG4iLCIndXNlIHN0cmljdCc7XG5sZXQgZHNDb3VudCA9ICguLi5hcmdzKSA9PiB7XG4gIGNvbnN0IFtzdHIsIC4uLnJlc3RdID0gYXJncztcbiAgY29uc3QgY29uY2F0ZWRTdWJzdGluZ3MgPSByZXN0LmpvaW4oJycpO1xuICBjb25zdCBpdGVyID0gKGNvdW50LCBwb3NpdGlvbiwgY3Vyciwgc3Vic3RyaW5nKSA9PiB7XG4gICAgICBpZihjdXJyLmluZGV4T2Yoc3Vic3RyaW5nLCBwb3NpdGlvbikgPT09IC0xKSByZXR1cm4gY291bnQ7XG5cbiAgICAgIGxldCBuZXdQb3NpdGlvbiA9IGN1cnIuaW5kZXhPZihzdWJzdHJpbmcsIHBvc2l0aW9uKTtcbiAgICAgIHJldHVybiBpdGVyKCsrY291bnQsICsrbmV3UG9zaXRpb24sIGN1cnIsIHN1YnN0cmluZyk7XG4gIH1cblxuICByZXR1cm4gaXRlcigwLCAwLCBzdHIudG9Mb3dlckNhc2UoKSwgY29uY2F0ZWRTdWJzdGluZ3MudG9Mb3dlckNhc2UoKSlcblxuXG59XG5jb25zb2xlLmxvZygnZHNDb3VudCcpO1xudHJ5IHtcbiAgdGVzdChkc0NvdW50LCBbJ2FiX19fYWJfXycsICdhJywgJ2InXSwgMik7XG4gIHRlc3QoZHNDb3VudCwgWydfX19jZF9fX18nLCAnYycsICdkJ10sIDEpO1xuICB0ZXN0KGRzQ291bnQsIFsnZGVfX19fX19fJywgJ2QnLCAnZSddLCAxKTtcbiAgdGVzdChkc0NvdW50LCBbJzEyXzEyX18xMicsICcxJywgJzInXSwgMyk7XG4gIHRlc3QoZHNDb3VudCwgWydfYmFfX19fX18nLCAnYScsICdiJ10sIDApO1xuICB0ZXN0KGRzQ291bnQsIFsnX2FfX2JfX19fJywgJ2EnLCAnYiddLCAwKTtcbiAgdGVzdChkc0NvdW50LCBbJy1hYi3QsGItYWInLCAnYScsICdiJ10sIDIpO1xuICB0ZXN0KGRzQ291bnQsIFsnYUFhJywgJ2EnLCAnYSddLCAyKTtcbiAgY29uc29sZS5pbmZvKFwiQ29uZ3JhdHVsYXRpb25zISBBbGwgdGVzdHMgc3VjY2VzcyBwYXNzZWQuXCIpO1xufSBjYXRjaChlKSB7XG4gIGNvbnNvbGUuZXJyb3IoZSk7XG59XG5cbi8vINCf0YDQvtGB0YLQsNGPINGE0YPQvdC60YbQuNGPINGC0LXRgdGC0LjRgNC+0LLQsNC90LjRj1xuXG5mdW5jdGlvbiB0ZXN0KGNhbGwsIGFyZ3MsIGNvdW50LCBuKSB7XG4gIGxldCByID0gKGNhbGwuYXBwbHkobiwgYXJncykgPT09IGNvdW50KTtcbiAgY29uc29sZS5hc3NlcnQociwgYEZpbmRlZCBpdGVtcyBjb3VudDogJHtjb3VudH1gKTtcbiAgaWYgKCFyKSB0aHJvdyBcIlRlc3QgZmFpbGVkIVwiO1xufVxuXG4iLCJjb25zb2xlLmxvZygncGFyc2VVcmwnKTtcbmxldCBwYXJzZVVybCA9ICh1cmwpID0+IHtcbiAgaWYgKHVybCA9PT0gJycpIHRocm93IG5ldyBFcnJvcign0J3QtdC60LrQvtGA0LXQutGC0L3Ri9C5IHVybCcpO1xuICBsZXQgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgKCdhJyk7XG4gIGEuaHJlZiA9IHVybDtcbiAgcmV0dXJuIGE7XG59XG5cbmxldCBhID0gcGFyc2VVcmwoJ2h0dHA6Ly90dXR1LnJ1OjgwODAvZG8vYW55LnBocD9hPTEmYltdPWEmYltdPWIjZm9vJyk7XG5cbmNvbnNvbGUubG9nKGEuaHJlZik7XG5jb25zb2xlLmxvZyhhLmhhc2gpO1xuY29uc29sZS5sb2coYS5wb3J0KTtcbmNvbnNvbGUubG9nKGEuaG9zdCk7XG5jb25zb2xlLmxvZyhhLnByb3RvY29sKTtcbmNvbnNvbGUubG9nKGEuaG9zdG5hbWUpO1xuY29uc29sZS5sb2coYS5wYXRobmFtZSk7XG5jb25zb2xlLmxvZyhhLm9yaWdpbik7XG4iLCIvL9CX0LDQtNCw0YfQsCAjMVxuY29uc3QgZ2V0U3Vic3RyaW5nID0gKHtzdHIsIHN1YlN0cjEsIHN1YlN0cjJ9KSA9PiB7XG4gIGlmIChzdHIgPT09ICcnKSByZXR1cm4gLTE7XG4gIGxldCBzdWJTdHJQb3NpdGlvbjEgPSBzdHIubGFzdEluZGV4T2Yoc3ViU3RyMSwgc3RyLmxlbmd0aCAtIDEpO1xuICBsZXQgc3ViU3RyUG9zaXRpb24yID0gc3RyLmxhc3RJbmRleE9mKHN1YlN0cjIsIHN0ci5sZW5ndGggLSAxKTtcblxuICByZXR1cm4gc3ViU3RyUG9zaXRpb24xICE9PSAtMSA/IHN1YlN0clBvc2l0aW9uMSA6XG4gICAgICAgICBzdWJTdHJQb3NpdGlvbjIgIT09IC0xID8gc3ViU3RyUG9zaXRpb24yIDpcbiAgICAgICAgIHN1YlN0clBvc2l0aW9uMSA9PT0gc3ViU3RyUG9zaXRpb24yID8gc3ViU3RyUG9zaXRpb24xIDogLTE7XG5cbn1cblxuZnVuY3Rpb24gZnVuYyhzLCBhLCBiKSB7XG5cbiAgaWYgKHMubWF0Y2goL14kLykpIHtcbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICB2YXIgaSA9IHMubGVuZ3RoIC0xO1xuICB2YXIgYUluZGV4ID0gICAgIC0xO1xuICB2YXIgYkluZGV4ID0gICAgIC0xO1xuXG4gIHdoaWxlICgoYUluZGV4ID09IC0xKSAmJiAoYkluZGV4ID09IC0xKSAmJiAoaSA+IDApKSB7XG4gICAgaWYgKHMuc3Vic3RyaW5nKGksIGkgKzEpID09IGEpIHtcbiAgICAgIGFJbmRleCA9IGk7XG4gICAgfVxuICAgIGlmIChzLnN1YnN0cmluZyhpLCBpICsxKSA9PSBiKSB7XG4gICAgICBiSW5kZXggPSBpO1xuICAgIH1cbiAgICBpID0gaSAtIDE7XG4gIH1cbiAgaWYgKGFJbmRleCAhPSAtMSkge1xuICAgIGlmIChiSW5kZXggPT0gLTEpIHtcbiAgICAgIHJldHVybiBhSW5kZXg7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcmV0dXJuIE1hdGgubWF4KGFJbmRleCwgYkluZGV4KTtcbiAgICB9XG4gIH1cblxuICBpZiAoYkluZGV4ICE9IC0xKSB7XG4gICAgcmV0dXJuIGJJbmRleDtcbiAgfVxuICBlbHNlIHtcbiAgICByZXR1cm4gLTE7XG4gIH1cbn1cblxuY29uc29sZS5sb2coXG4gICAgJ1JlZmFjdG9yaW5nIHRhc2sgMScsXG4gICAgZnVuYygnMTIzNDU1NjAnLCAnMCcsICcwJyksIGdldFN1YnN0cmluZyh7c3RyOiAnMTIzNDU1NjAnLCBzdWJTdHIxOiAnMCcsIHN1YlN0cjI6ICcwJ30pXG4pXG5cblxuLy/Ql9Cw0LTQsNGH0LAgMlxuY29uc3QgZHJhd1JhdGluZyA9ICh2b3RlKSA9PiB7XG4gIGlmICh2b3RlID4gMCAmJiB2b3RlIDw9IDEwMCkgcmV0dXJuIE1hdGguY2VpbCh2b3RlIC8gMjApO1xuICB0aHJvdyBuZXcgRXJyb3IoJ9Cd0LXQutC+0YDRgNC10LrRgtC90L7QtSDQt9C90LDRh9C10L3QuNC1Jyk7XG59XG5cbi8vINCf0YDQvtCy0LXRgNC60LAg0YDQsNCx0L7RgtGLINGA0LXQt9GD0LvRjNGC0LDRgtCwXG5jb25zb2xlLmxvZyhkcmF3UmF0aW5nKDApKTtcbmNvbnNvbGUubG9nKGRyYXdSYXRpbmcoMSkgKTtcbmNvbnNvbGUubG9nKGRyYXdSYXRpbmcoNTApKTtcbmNvbnNvbGUubG9nKGRyYXdSYXRpbmcoOTkpKTtcbmNvbnNvbGUubG9nKGRyYXdSYXRpbmcoLTEpKTsiXX0=
