'use strict';

var getOnlyBrackets = str => {
  var regexp = /[^()\[\]{},<>]/g;
  return str.replace(regexp, "");
};
var areBracketsInOrder = str => {
  let brackets = new Map([[']', '['], ['}', '{'], [')', '('], ['>', '<']]);
  let isClean = true;
  const iter = (i, len, isCleaning, brackets, cur, acc) => {
    if (i >= len && !isCleaning) return isCleaning && !acc.length;
    if (i >= len) return isCleaning && !acc.length;
    if (brackets.has(cur[i])) {
      let isCleaning = acc.pop() === brackets.get(cur[i]);
      return iter(++i, len, isCleaning, brackets, cur, acc);
    } else {
      acc.push(str[i]);
      return iter(++i, len, isCleaning, brackets, cur, acc);
    }
  };
  return iter(0, str.length, isClean, brackets, str, []);
};
var checkSyntax = str => {
  const newStr = getOnlyBrackets(str);
  return areBracketsInOrder(newStr) ? 0 : 1;
};
console.log('checkSyntax');
console.log(checkSyntax("---((((((()))))))----") === 0);
console.log(checkSyntax("") === 0);
console.log(checkSyntax("before ( middle []) after ") === 0);
console.log(checkSyntax(") (") === 1);
console.log(checkSyntax("} {") === 1);
console.log(checkSyntax("<>(])") === 1);
console.log(checkSyntax("(  [  <>  ()  ]  <>  )") === 0);
console.log(checkSyntax("   (      [)") === 1);
'use strict';

let dsCount = (...args) => {
  const [str, ...rest] = args;
  const concatedSubstings = rest.join('');
  const iter = (count, position, curr, substring) => {
    if (curr.indexOf(substring, position) === -1) return count;

    let newPosition = curr.indexOf(substring, position);
    return iter(++count, ++newPosition, curr, substring);
  };

  return iter(0, 0, str.toLowerCase(), concatedSubstings.toLowerCase());
};
console.log('dsCount');
try {
  test(dsCount, ['ab___ab__', 'a', 'b'], 2);
  test(dsCount, ['___cd____', 'c', 'd'], 1);
  test(dsCount, ['de_______', 'd', 'e'], 1);
  test(dsCount, ['12_12__12', '1', '2'], 3);
  test(dsCount, ['_ba______', 'a', 'b'], 0);
  test(dsCount, ['_a__b____', 'a', 'b'], 0);
  test(dsCount, ['-ab-аb-ab', 'a', 'b'], 2);
  test(dsCount, ['aAa', 'a', 'a'], 2);
  console.info("Congratulations! All tests success passed.");
} catch (e) {
  console.error(e);
}

// Простая функция тестирования

function test(call, args, count, n) {
  let r = call.apply(n, args) === count;
  console.assert(r, `Finded items count: ${count}`);
  if (!r) throw "Test failed!";
}
console.log('parseUrl');
let parseUrl = url => {
  let a = document.createElement('a');
  a.href = url;
  return a;
};

let a = parseUrl('http://tutu.ru:8080/do/any.php?a=1&b[]=a&b[]=b#foo');

console.log(a.href);
console.log(a.hash);
console.log(a.port);
console.log(a.host);
console.log(a.protocol);
console.log(a.hostname);
console.log(a.pathname);
console.log(a.origin);
//Задача #1
const getSubstring = ({ str, subStr1, subStr2 }) => {
  if (str === '') return -1;
  let subStrPosition1 = str.lastIndexOf(subStr1, str.length - 1);
  let subStrPosition2 = str.lastIndexOf(subStr2, str.length - 1);

  return subStrPosition1 !== -1 ? subStrPosition1 : subStrPosition2 !== -1 ? subStrPosition2 : subStrPosition1 === subStrPosition2 ? subStrPosition1 : -1;
};

function func(s, a, b) {

  if (s.match(/^$/)) {
    return -1;
  }

  var i = s.length - 1;
  var aIndex = -1;
  var bIndex = -1;

  while (aIndex == -1 && bIndex == -1 && i > 0) {
    if (s.substring(i, i + 1) == a) {
      aIndex = i;
    }
    if (s.substring(i, i + 1) == b) {
      bIndex = i;
    }
    i = i - 1;
  }
  if (aIndex != -1) {
    if (bIndex == -1) {
      return aIndex;
    } else {
      return Math.max(aIndex, bIndex);
    }
  }

  if (bIndex != -1) {
    return bIndex;
  } else {
    return -1;
  }
}

console.log('Refactoring task 1', func('12345560', '0', '0'), getSubstring({ str: '12345560', subStr1: '0', subStr2: '0' }));

//Задача 2
const drawRating = (vote, range = [0, 20, 40, 60, 80, 100], stars = '★☆☆☆☆') => {
  let returnedValue;
  for (let i = 0; i < range.length - 1; i++) {
    if (vote >= range[i] && vote <= range[i + 1]) {
      returnedValue = stars;
      break;
    }
  }
  return returnedValue;
};
let range = [0, 20, 40, 60, 80, 100];

// Проверка работы результата
console.log(drawRating(0, range, '★☆☆☆☆'));
console.log(drawRating(1, range, '★☆☆☆☆'));
console.log(drawRating(50, range, '★★★☆☆'));
console.log(drawRating(99, range, '★★★★★'));
//# sourceMappingURL=data:application/json;charset=utf8;base64,
