'use strict';

var getOnlyBrackets = str => {
  var regexp = /[^()\[\]{},<>]/g;
  return str.replace(regexp, "");
};
var areBracketsInOrder = str => {
  let brackets = new Map([[']', '['], ['}', '{'], [')', '('], ['>', '<']]);
  let isClean = true;
  const iter = (i, len, isCleaning, brackets, cur, acc) => {
    if (i >= len && !isCleaning) return isCleaning && !acc.length;
    if (i >= len) return isCleaning && !acc.length;
    if (brackets.has(cur[i])) {
      let isCleaning = acc.pop() === brackets.get(cur[i]);
      return iter(++i, len, isCleaning, brackets, cur, acc);
    } else {
      acc.push(str[i]);
      return iter(++i, len, isCleaning, brackets, cur, acc);
    }
  };
  return iter(0, str.length, isClean, brackets, str, []);
};
var checkSyntax = str => {
  const newStr = getOnlyBrackets(str);
  return areBracketsInOrder(newStr) ? 0 : 1;
};
//console.log (checkSyntax("---((((((()))))))----") === 0);
//console.log (checkSyntax ("") === 0);
//console.log (checkSyntax ("before ( middle []) after ") === 0);
//console.log (checkSyntax (") (") === 1);
//console.log (checkSyntax ("} {") === 1);
//console.log (checkSyntax ("<>(])") === 1);
//console.log (checkSyntax ("(  [  <>  ()  ]  <>  )") === 0);
//console.log (checkSyntax ("   (      [)") === 1);
'use strict';

let dsCount = (...args) => {
  const [str, ...rest] = args;
  const concatedSubstings = rest.join('');
  const iter = (count, position, curr, substring) => {
    if (curr.indexOf(substring, position) === -1) return count;

    let newPosition = curr.indexOf(substring, position);
    return iter(++count, ++newPosition, curr, substring);
  };

  return iter(0, 0, str.toLowerCase(), concatedSubstings.toLowerCase());
};

try {
  test(dsCount, ['ab___ab__', 'a', 'b'], 2);
  test(dsCount, ['___cd____', 'c', 'd'], 1);
  test(dsCount, ['de_______', 'd', 'e'], 1);
  test(dsCount, ['12_12__12', '1', '2'], 3);
  test(dsCount, ['_ba______', 'a', 'b'], 0);
  test(dsCount, ['_a__b____', 'a', 'b'], 0);
  test(dsCount, ['-ab-аb-ab', 'a', 'b'], 2);
  test(dsCount, ['aAa', 'a', 'a'], 2);
  console.info("Congratulations! All tests success passed.");
} catch (e) {
  console.error(e);
}

// Простая функция тестирования

function test(call, args, count, n) {
  let r = call.apply(n, args) === count;
  console.assert(r, `Finded items count: ${count}`);
  if (!r) throw "Test failed!";
}
//Задача #1
const getSubstring = ({ str, subStr1, subStr2 }) => {
  if (str === '') return -1;
  let subStrPosition1 = str.lastIndexOf(subStr1, str.length - 1);
  let subStrPosition2 = str.lastIndexOf(subStr2, str.length - 1);

  return subStrPosition1 !== -1 ? subStrPosition1 : subStrPosition2 !== -1 ? subStrPosition2 : subStrPosition1 === subStrPosition2 ? subStrPosition1 : -1;
};

function func(s, a, b) {

  if (s.match(/^$/)) {
    return -1;
  }

  var i = s.length - 1;
  var aIndex = -1;
  var bIndex = -1;

  while (aIndex == -1 && bIndex == -1 && i > 0) {
    if (s.substring(i, i + 1) == a) {
      aIndex = i;
    }
    if (s.substring(i, i + 1) == b) {
      bIndex = i;
    }
    i = i - 1;
  }
  if (aIndex != -1) {
    if (bIndex == -1) {
      return aIndex;
    } else {
      return Math.max(aIndex, bIndex);
    }
  }

  if (bIndex != -1) {
    return bIndex;
  } else {
    return -1;
  }
}

console.log(func('12345560', '0', '0'), getSubstring({ str: '12345560', subStr1: '0', subStr2: '0' }));
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNoZWNrU3ludGF4LmpzIiwiZHNDb3VudC5qcyIsInJlZmFjdG9yaW5nLmpzIl0sIm5hbWVzIjpbImdldE9ubHlCcmFja2V0cyIsInN0ciIsInJlZ2V4cCIsInJlcGxhY2UiLCJhcmVCcmFja2V0c0luT3JkZXIiLCJicmFja2V0cyIsIk1hcCIsImlzQ2xlYW4iLCJpdGVyIiwiaSIsImxlbiIsImlzQ2xlYW5pbmciLCJjdXIiLCJhY2MiLCJsZW5ndGgiLCJoYXMiLCJwb3AiLCJnZXQiLCJwdXNoIiwiY2hlY2tTeW50YXgiLCJuZXdTdHIiLCJkc0NvdW50IiwiYXJncyIsInJlc3QiLCJjb25jYXRlZFN1YnN0aW5ncyIsImpvaW4iLCJjb3VudCIsInBvc2l0aW9uIiwiY3VyciIsInN1YnN0cmluZyIsImluZGV4T2YiLCJuZXdQb3NpdGlvbiIsInRvTG93ZXJDYXNlIiwidGVzdCIsImNvbnNvbGUiLCJpbmZvIiwiZSIsImVycm9yIiwiY2FsbCIsIm4iLCJyIiwiYXBwbHkiLCJhc3NlcnQiLCJnZXRTdWJzdHJpbmciLCJzdWJTdHIxIiwic3ViU3RyMiIsInN1YlN0clBvc2l0aW9uMSIsImxhc3RJbmRleE9mIiwic3ViU3RyUG9zaXRpb24yIiwiZnVuYyIsInMiLCJhIiwiYiIsIm1hdGNoIiwiYUluZGV4IiwiYkluZGV4IiwiTWF0aCIsIm1heCIsImxvZyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsSUFBSUEsa0JBQW1CQyxHQUFELElBQVM7QUFDN0IsTUFBSUMsU0FBUyxpQkFBYjtBQUNBLFNBQVFELEdBQUQsQ0FBTUUsT0FBTixDQUFjRCxNQUFkLEVBQXNCLEVBQXRCLENBQVA7QUFDRCxDQUhEO0FBSUEsSUFBSUUscUJBQXNCSCxHQUFELElBQVM7QUFDaEMsTUFBSUksV0FBVyxJQUFJQyxHQUFKLENBQ1gsQ0FDSSxDQUFDLEdBQUQsRUFBTSxHQUFOLENBREosRUFFSSxDQUFDLEdBQUQsRUFBTSxHQUFOLENBRkosRUFHSSxDQUFDLEdBQUQsRUFBTSxHQUFOLENB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OztBQUVEckIsUUFBUXdCLEdBQVIsQ0FBWVQsS0FBSyxVQUFMLEVBQWlCLEdBQWpCLEVBQXNCLEdBQXRCLENBQVosRUFBd0NOLGFBQWEsRUFBQzFDLEtBQUssVUFBTixFQUFrQjJDLFNBQVMsR0FBM0IsRUFBZ0NDLFNBQVMsR0FBekMsRUFBYixDQUF4QyIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xudmFyIGdldE9ubHlCcmFja2V0cyA9IChzdHIpID0+IHtcbiAgdmFyIHJlZ2V4cCA9IC9bXigpXFxbXFxde30sPD5dL2c7XG4gIHJldHVybiAoc3RyKS5yZXBsYWNlKHJlZ2V4cCwgXCJcIik7XG59O1xudmFyIGFyZUJyYWNrZXRzSW5PcmRlciA9IChzdHIpID0+IHtcbiAgbGV0IGJyYWNrZXRzID0gbmV3IE1hcChcbiAgICAgIFtcbiAgICAgICAgICBbJ10nLCAnWyddLFxuICAgICAgICAgIFsnfScsICd7J10sXG4gICAgICAgICAgWycpJywgJygnXSxcbiAgICAgICAgICBbJz4nLCAnPCddXG4gICAgICBdXG4gICk7XG4gIGxldCBpc0NsZWFuID0gdHJ1ZTtcbiAgY29uc3QgaXRlciA9IChpLCBsZW4sIGlzQ2xlYW5pbmcsIGJyYWNrZXRzLCBjdXIsIGFjYykgPT4ge1xuICAgIGlmIChpID49IGxlbiAmJiAhaXNDbGVhbmluZykgcmV0dXJuIGlzQ2xlYW5pbmcgJiYgIWFjYy5sZW5ndGg7XG4gICAgaWYgKGkgPj0gbGVuKSByZXR1cm4gaXNDbGVhbmluZyAmJiAhYWNjLmxlbmd0aDtcbiAgICBpZiAoYnJhY2tldHMuaGFzKGN1cltpXSkpIHtcbiAgICAgIGxldCBpc0NsZWFuaW5nID0gYWNjLnBvcCgpID09PSBicmFja2V0cy5nZXQoY3VyW2ldKTtcbiAgICAgIHJldHVybiBpdGVyKCsraSwgbGVuLCBpc0NsZWFuaW5nLCBicmFja2V0cywgY3VyLCBhY2MpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhY2MucHVzaChzdHJbaV0pO1xuICAgICAgcmV0dXJuIGl0ZXIoKytpLCBsZW4sIGlzQ2xlYW5pbmcsIGJyYWNrZXRzLCBjdXIsIGFjYyk7XG4gICAgfVxuICB9XG4gIHJldHVybiBpdGVyKDAsIHN0ci5sZW5ndGgsIGlzQ2xlYW4sIGJyYWNrZXRzLCBzdHIsIFtdKVxufTtcbnZhciBjaGVja1N5bnRheCA9IChzdHIpID0+IHtcbiAgY29uc3QgbmV3U3RyID0gZ2V0T25seUJyYWNrZXRzKHN0cik7XG4gIHJldHVybiBhcmVCcmFja2V0c0luT3JkZXIobmV3U3RyKSA/IDAgOiAxO1xufTtcbi8vY29uc29sZS5sb2cgKGNoZWNrU3ludGF4KFwiLS0tKCgoKCgoKCkpKSkpKSktLS0tXCIpID09PSAwKTtcbi8vY29uc29sZS5sb2cgKGNoZWNrU3ludGF4IChcIlwiKSA9PT0gMCk7XG4vL2NvbnNvbGUubG9nIChjaGVja1N5bnRheCAoXCJiZWZvcmUgKCBtaWRkbGUgW10pIGFmdGVyIFwiKSA9PT0gMCk7XG4vL2NvbnNvbGUubG9nIChjaGVja1N5bnRheCAoXCIpIChcIikgPT09IDEpO1xuLy9jb25zb2xlLmxvZyAoY2hlY2tTeW50YXggKFwifSB7XCIpID09PSAxKTtcbi8vY29uc29sZS5sb2cgKGNoZWNrU3ludGF4IChcIjw+KF0pXCIpID09PSAxKTtcbi8vY29uc29sZS5sb2cgKGNoZWNrU3ludGF4IChcIiggIFsgIDw+ICAoKSAgXSAgPD4gIClcIikgPT09IDApO1xuLy9jb25zb2xlLmxvZyAoY2hlY2tTeW50YXggKFwiICAgKCAgICAgIFspXCIpID09PSAxKTtcblxuIiwiJ3VzZSBzdHJpY3QnO1xubGV0IGRzQ291bnQgPSAoLi4uYXJncykgPT4ge1xuICBjb25zdCBbc3RyLCAuLi5yZXN0XSA9IGFyZ3M7XG4gIGNvbnN0IGNvbmNhdGVkU3Vic3RpbmdzID0gcmVzdC5qb2luKCcnKTtcbiAgY29uc3QgaXRlciA9IChjb3VudCwgcG9zaXRpb24sIGN1cnIsIHN1YnN0cmluZykgPT4ge1xuICAgICAgaWYoY3Vyci5pbmRleE9mKHN1YnN0cmluZywgcG9zaXRpb24pID09PSAtMSkgcmV0dXJuIGNvdW50O1xuXG4gICAgICBsZXQgbmV3UG9zaXRpb24gPSBjdXJyLmluZGV4T2Yoc3Vic3RyaW5nLCBwb3NpdGlvbik7XG4gICAgICByZXR1cm4gaXRlcigrK2NvdW50LCArK25ld1Bvc2l0aW9uLCBjdXJyLCBzdWJzdHJpbmcpO1xuICB9XG5cbiAgcmV0dXJuIGl0ZXIoMCwgMCwgc3RyLnRvTG93ZXJDYXNlKCksIGNvbmNhdGVkU3Vic3RpbmdzLnRvTG93ZXJDYXNlKCkpXG5cblxufVxuXG50cnkge1xuICB0ZXN0KGRzQ291bnQsIFsnYWJfX19hYl9fJywgJ2EnLCAnYiddLCAyKTtcbiAgdGVzdChkc0NvdW50LCBbJ19fX2NkX19fXycsICdjJywgJ2QnXSwgMSk7XG4gIHRlc3QoZHNDb3VudCwgWydkZV9fX19fX18nLCAnZCcsICdlJ10sIDEpO1xuICB0ZXN0KGRzQ291bnQsIFsnMTJfMTJfXzEyJywgJzEnLCAnMiddLCAzKTtcbiAgdGVzdChkc0NvdW50LCBbJ19iYV9fX19fXycsICdhJywgJ2InXSwgMCk7XG4gIHRlc3QoZHNDb3VudCwgWydfYV9fYl9fX18nLCAnYScsICdiJ10sIDApO1xuICB0ZXN0KGRzQ291bnQsIFsnLWFiLdCwYi1hYicsICdhJywgJ2InXSwgMik7XG4gIHRlc3QoZHNDb3VudCwgWydhQWEnLCAnYScsICdhJ10sIDIpO1xuICBjb25zb2xlLmluZm8oXCJDb25ncmF0dWxhdGlvbnMhIEFsbCB0ZXN0cyBzdWNjZXNzIHBhc3NlZC5cIik7XG59IGNhdGNoKGUpIHtcbiAgY29uc29sZS5lcnJvcihlKTtcbn1cblxuLy8g0J/RgNC+0YHRgtCw0Y8g0YTRg9C90LrRhtC40Y8g0YLQtdGB0YLQuNGA0L7QstCw0L3QuNGPXG5cbmZ1bmN0aW9uIHRlc3QoY2FsbCwgYXJncywgY291bnQsIG4pIHtcbiAgbGV0IHIgPSAoY2FsbC5hcHBseShuLCBhcmdzKSA9PT0gY291bnQpO1xuICBjb25zb2xlLmFzc2VydChyLCBgRmluZGVkIGl0ZW1zIGNvdW50OiAke2NvdW50fWApO1xuICBpZiAoIXIpIHRocm93IFwiVGVzdCBmYWlsZWQhXCI7XG59XG5cbiIsIi8v0JfQsNC00LDRh9CwICMxXG5jb25zdCBnZXRTdWJzdHJpbmcgPSAoe3N0ciwgc3ViU3RyMSwgc3ViU3RyMn0pID0+IHtcbiAgaWYgKHN0ciA9PT0gJycpIHJldHVybiAtMTtcbiAgbGV0IHN1YlN0clBvc2l0aW9uMSA9IHN0ci5sYXN0SW5kZXhPZihzdWJTdHIxLCBzdHIubGVuZ3RoIC0gMSk7XG4gIGxldCBzdWJTdHJQb3NpdGlvbjIgPSBzdHIubGFzdEluZGV4T2Yoc3ViU3RyMiwgc3RyLmxlbmd0aCAtIDEpO1xuXG4gIHJldHVybiBzdWJTdHJQb3NpdGlvbjEgIT09IC0xID8gc3ViU3RyUG9zaXRpb24xIDpcbiAgICAgICAgIHN1YlN0clBvc2l0aW9uMiAhPT0gLTEgPyBzdWJTdHJQb3NpdGlvbjIgOlxuICAgICAgICAgc3ViU3RyUG9zaXRpb24xID09PSBzdWJTdHJQb3NpdGlvbjIgPyBzdWJTdHJQb3NpdGlvbjEgOiAtMTtcblxufVxuXG5mdW5jdGlvbiBmdW5jKHMsIGEsIGIpIHtcblxuICBpZiAocy5tYXRjaCgvXiQvKSkge1xuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIHZhciBpID0gcy5sZW5ndGggLTE7XG4gIHZhciBhSW5kZXggPSAgICAgLTE7XG4gIHZhciBiSW5kZXggPSAgICAgLTE7XG5cbiAgd2hpbGUgKChhSW5kZXggPT0gLTEpICYmIChiSW5kZXggPT0gLTEpICYmIChpID4gMCkpIHtcbiAgICBpZiAocy5zdWJzdHJpbmcoaSwgaSArMSkgPT0gYSkge1xuICAgICAgYUluZGV4ID0gaTtcbiAgICB9XG4gICAgaWYgKHMuc3Vic3RyaW5nKGksIGkgKzEpID09IGIpIHtcbiAgICAgIGJJbmRleCA9IGk7XG4gICAgfVxuICAgIGkgPSBpIC0gMTtcbiAgfVxuICBpZiAoYUluZGV4ICE9IC0xKSB7XG4gICAgaWYgKGJJbmRleCA9PSAtMSkge1xuICAgICAgcmV0dXJuIGFJbmRleDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICByZXR1cm4gTWF0aC5tYXgoYUluZGV4LCBiSW5kZXgpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChiSW5kZXggIT0gLTEpIHtcbiAgICByZXR1cm4gYkluZGV4O1xuICB9XG4gIGVsc2Uge1xuICAgIHJldHVybiAtMTtcbiAgfVxufVxuXG5jb25zb2xlLmxvZyhmdW5jKCcxMjM0NTU2MCcsICcwJywgJzAnKSwgZ2V0U3Vic3RyaW5nKHtzdHI6ICcxMjM0NTU2MCcsIHN1YlN0cjE6ICcwJywgc3ViU3RyMjogJzAnfSkpXG4iXX0=
