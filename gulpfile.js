"use strict";const gulp = require('gulp');const l = require('gulp-load-plugins')();const sprite = require('gulp.spritesmith');const path = require('path');const rigger = require('gulp-rigger');const cheerio = require('gulp-cheerio');const imagemin = require('gulp-imagemin');const fontgen = require('gulp-fontgen');const basePath = './src/';const buildPath = './build/';const paths = {  js: {    src: [      'bower_components/jquery/dist/jquery.js',      'bower_components/flexibility/flexibility.js',      basePath + 'js/*.js'    ],    dist: buildPath + 'js/'  },  sass: {    src: [      basePath + 'sass/screen.sass',      basePath + 'sass/screen-ie-fallback.sass'    ],    dist: buildPath + 'css/'  },  twig: {    pages: basePath + 'pages/*.twig',    src: basePath + 'blocks/**/*.twig',    dist: buildPath  },  fonts: {    src: basePath + 'fonts/*.*',    dist: buildPath + 'fonts/'  },  img: {    src: basePath + 'img/**/*.{jpg,png}',    dist: buildPath + 'img/',    jpg: {      src: basePath + 'blocks/**/*.jpg',      dist: buildPath + 'img/'    },    png: {      src: basePath + 'blocks/**/*.png',      dist: basePath + 'sprites/png/'    },    svg: {      src: basePath + 'blocks/**/*.svg',      dist: basePath + 'sprites/svg/',      twigTemplatePath: basePath + 'sprites/svg/svg-template.twig',      scssTemplatePath: basePath + 'sass/helpers/_svg-sprite-template.scss'    }  }}function lazyIntegration(task, path, options){  "use strict";  options.task = task;  gulp.task(task, function(callback){    var taskType = require(path).call(this, options);    return taskType(callback);  });}lazyIntegration('styles', './gulpTasks/styles.js', {  src: paths.sass.src,  dist: paths.sass.dist});lazyIntegration('fonts', './gulpTasks/fonts.js', {  src: paths.fonts.src,  dist: paths.fonts.dist});lazyIntegration('img:resize', './gulpTasks/image-resize.js', {  src: paths.img.jpg.src,  dist: paths.img.jpg.dist});lazyIntegration('img:min', './gulpTasks/image-min.js', {  src: paths.img.src,  dist: paths.img.dist});lazyIntegration('svg:sprites', './gulpTasks/svg-sprites.js', {  src: paths.img.svg.src,  dist: paths.img.svg.dist,  scssTemplatePath: paths.img.svg.scssTemplatePath,  twigTemplatePath: paths.img.svg.twigTemplatePath,  dirname: __dirname});lazyIntegration('copy:img', './gulpTasks/copy.js', {  src: paths.img.src,  dist: paths.img.dist,});lazyIntegration('copy:fonts', './gulpTasks/copy.js', {  src: paths.fonts.src,  dist: paths.fonts.dist,});lazyIntegration('server', './gulpTasks/server.js', {});lazyIntegration('rev', './gulpTasks/rev.js', {});lazyIntegration('svg:min', './gulpTasks/svgmin.js', {  src: paths.img.svg.src,  dist: paths.img.svg.dist});lazyIntegration('svg:attr', './gulpTasks/svg-remove-attributes.js', {  src: paths.img.svg.src,  dist: paths.img.svg.dist});lazyIntegration('svg:replace', './gulpTasks/svg-bug-fixes.js', {  src: paths.img.svg.src,  dist: paths.img.svg.dist});lazyIntegration('html:svg', './gulpTasks/html-build.js', {  src: paths.twig.src,  dist: paths.twig.dist});lazyIntegration('js:build', './gulpTasks/js-build.js', {  src: paths.js.src,  dist: paths.js.dist});gulp.task('compile', function () {  'use strict';  var twig = require('gulp-twig');  return gulp.src(paths.twig.pages)    .pipe(twig())    .pipe(gulp.dest(paths.twig.dist));});gulp.task('sprite:png', function (callback) {  var spriteData = gulp.src(paths.img.png.src)    .pipe(sprite({      // retinaSrcFilter: ['src/img/icons-png2x/*@2x.png'],      // retinaImgName: 'png-sprite2x.png',      // imgName: 'png-sprite.png',      // cssName: '_png-sprite.scss',      // cssFormat: 'scss',      imgPath: '../img/sprite.png',      algorithm: 'top-down',      retinaSrcFilter: ['src/blocks/**/*@2x.png'],      imgName: 'sprite.png',      retinaImgName: '../img/sprite@2x.png',      cssName: 'png-sprite.sass'    }));  spriteData.img.pipe(gulp.dest(basePath + 'sprites/png/'));  l.debug({title: 'sprite-images:create'});  spriteData.css.pipe(gulp.dest(basePath + 'sass/helpers/'));  l.debug({title: 'sprite-sass:create'});  callback();});gulp.task('build', gulp.series('copy:img','copy:fonts','fonts', 'sprite:png','svg:min', 'svg:sprites', 'styles', 'compile', 'js:build', 'img:resize', 'img:min'));gulp.task('watch', function(){  gulp.watch([    basePath + 'sass/**/*.sass',    basePath + 'blocks/**/*.sass'  ], gulp.series('styles'));  gulp.watch(basePath + '**/*.twig', gulp.series('compile'));  gulp.watch(basePath + 'js/*.js', gulp.series('js:build'));  gulp.watch([      basePath + 'img/**/*.*',      basePath + 'fonts/**/*.*'  ], gulp.series(['copy:img', 'copy:fonts']));  gulp.watch(basePath + 'blocks/**/*.png', gulp.series('sprite:png'));  gulp.watch(basePath + 'blocks/**/*.svg', gulp.series('svg:sprites'));});gulp.task('dev', gulp.series('build', gulp.parallel('watch', 'server')));